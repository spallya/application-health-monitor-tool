import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.time.OffsetDateTime;
import java.util.*;

public class GitHubCommitFetcher {

    private static final String GITHUB_API = "https://api.github.com";
    private final RestTemplate restTemplate = new RestTemplate();
    private final String token;

    public GitHubCommitFetcher(String githubToken) {
        this.token = githubToken;
    }

    public void fetchUserCommits(String username, OffsetDateTime since, OffsetDateTime until) {
        List<String> repos = fetchUserRepos(username);
        for (String repo : repos) {
            List<String> branches = fetchBranches(username, repo);
            for (String branch : branches) {
                List<Map<String, Object>> commits = fetchCommits(username, repo, branch, since, until);
                for (Map<String, Object> commit : commits) {
                    Map<String, Object> author = (Map<String, Object>) commit.get("author");
                    if (author != null && username.equalsIgnoreCase((String) author.get("login"))) {
                        System.out.println("Repo: " + repo + ", Branch: " + branch + ", Commit: " + commit.get("sha"));
                    }
                }
            }
        }
    }

    private List<String> fetchUserRepos(String username) {
        List<String> repoNames = new ArrayList<>();
        int page = 1;
        while (true) {
            String url = UriComponentsBuilder.fromHttpUrl(GITHUB_API + "/user/repos")
                    .queryParam("type", "all")
                    .queryParam("per_page", 100)
                    .queryParam("page", page)
                    .toUriString();
            ResponseEntity<List> response = restTemplate.exchange(url, HttpMethod.GET, getHttpEntity(), List.class);
            List<Map<String, Object>> repos = response.getBody();
            if (repos == null || repos.isEmpty()) break;
            for (Map<String, Object> repo : repos) {
                String ownerLogin = ((Map<String, Object>) repo.get("owner")).get("login").toString();
                if (ownerLogin.equalsIgnoreCase(username)) {
                    repoNames.add((String) repo.get("name"));
                }
            }
            page++;
        }
        return repoNames;
    }

    private List<String> fetchBranches(String username, String repo) {
        String url = GITHUB_API + "/repos/" + username + "/" + repo + "/branches";
        ResponseEntity<List> response = restTemplate.exchange(url, HttpMethod.GET, getHttpEntity(), List.class);
        List<String> branchNames = new ArrayList<>();
        for (Object obj : response.getBody()) {
            Map<String, Object> branch = (Map<String, Object>) obj;
            branchNames.add((String) branch.get("name"));
        }
        return branchNames;
    }

    private List<Map<String, Object>> fetchCommits(String username, String repo, String branch, OffsetDateTime since, OffsetDateTime until) {
        String url = UriComponentsBuilder.fromHttpUrl(GITHUB_API + "/repos/" + username + "/" + repo + "/commits")
                .queryParam("sha", branch)
                .queryParam("since", since)
                .queryParam("until", until)
                .toUriString();

        ResponseEntity<List> response = restTemplate.exchange(url, HttpMethod.GET, getHttpEntity(), List.class);
        return (List<Map<String, Object>>) (response.getBody() == null ? List.of() : response.getBody());
    }

    private HttpEntity<String> getHttpEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));
        return new HttpEntity<>(headers);
    }
}
